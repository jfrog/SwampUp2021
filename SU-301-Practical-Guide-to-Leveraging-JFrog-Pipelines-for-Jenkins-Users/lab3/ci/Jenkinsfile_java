pipeline {
    agent {
        kubernetes {
            yaml """\
            apiVersion: v1
            kind: Pod
            metadata:
              labels:
                some-label: some-label-value
            spec:
              containers:
              - name: maven
                image: maven:alpine
                command:
                - cat
                tty: true
              - name: docker
                image: docker:latest
                command:
                - cat
                tty: true
                volumeMounts:
                - name: docker-sock
                  mountPath: /var/run/docker.sock
              volumes:
                - name: docker-sock
                  hostPath:
                    path: /var/run/docker.sock
            """.stripIndent()
        }
    }

    environment {
        ARTY_CREDS=credentials('jenkins')
        ART_ID="artifactory-eu"
        JAVA_HOME = '/usr/lib/jvm/java-1.8-openjdk/'
        MAVEN_HOME = '/usr/share/maven'
    }

    parameters {
        string(name: 'MY_GIT_URL', defaultValue: 'https://github.com/cyan21/Swampup2021.git', description: '')
        string(name: 'MY_GIT_BRANCH', defaultValue: 'main', description: '')
        string(name: 'TRAINING_PATH', defaultValue: 'SU-301-Practical-Guide-to-Leveraging-JFrog-Pipelines-for-Jenkins-Users', description: '')
        string(name: 'NEW_VERSION', defaultValue: '1.6.2', description: '')
        string(name: 'NEW_MSG', defaultValue: 'Welcome to Swampup 2021', description: '')

        string(name: 'JPD_URL', defaultValue: 'swampup301.jfrog.io', description: 'DO NOT ADD PROTOCOL')
        string(name: 'MVN_REPO', defaultValue: 'urs-mvn', description: '')
        string(name: 'DOCKER_REPO', defaultValue: 'urs-docker', description: '')
        
        string(name: 'WEBHOOK_PASS', defaultValue: 'Chaysinh21', description: '')
        string(name: 'WEBHOOK_URL', defaultValue: 'https://swampup301-pipelines-api.jfrog.io/v1/projectIntegrations/57/hook', description: '')
        
        booleanParam(name: 'MVN_BUILD', defaultValue: false, description: 'Execute Maven build')
        booleanParam(name: 'DOCKER_BUILD', defaultValue: false, description: 'Execute Docker build')        
    }
    
    stages {

        stage ('Maven Build') {
            when {
                expression {
                    params.MVN_BUILD
                }
            }
            steps {
                container('maven') {
                     
                    git branch: params.MY_GIT_BRANCH , url: params.MY_GIT_URL

                    
                    dir (params.TRAINING_PATH) {
                    
                        sh """
                            ls -l 
                            sed -i "s|<version>1.4.1</version>|<version>${params.NEW_VERSION}</version>|" "src/java/pom.xml"
                            sed -i "s|<version>1.4.1</version>|<version>${params.NEW_VERSION}</version>|" "src/java/application/pom.xml"
                            sed -i "s|<version>1.4.1</version>|<version>${params.NEW_VERSION}</version>|" "src/java/library/pom.xml"
                            
                            cat src/java/pom.xml
    
                            echo "service.message=${params.NEW_MSG}" > src/java/application/src/main/resources/application.properties 
                            cat src/java/application/src/main/resources/application.properties 
                        """
                    }
                    
                    rtServer (
                        id: env.ART_ID,
                        url: "https://${params.JPD_URL}/artifactory",
                        credentialsId: 'jenkins'
                    )
    
                    rtMavenDeployer (
                        id: "MAVEN_DEPLOYER",
                        serverId: env.ART_ID,
                        releaseRepo: "urs-mvn",
                        snapshotRepo: "urs-mvn"
                    )
    
                    rtMavenResolver (
                        id: "MAVEN_RESOLVER",
                        serverId: env.ART_ID,
                        releaseRepo: "urs-mvn",
                        snapshotRepo: "urs-mvn"
                    )
                    
                    rtBuildInfo (
                        captureEnv: true,
                        excludeEnvPatterns: ['*private*', 'internal-*', 'ADM*'],
     
                        buildName: 'jenkins-maven',
                        buildNumber: env.BUILD_NUMBER
                    )
                                        
                    rtMavenRun (
                        pom: "${params.TRAINING_PATH}/src/java/pom.xml",
                        goals: 'clean package',
                        deployerId: "MAVEN_DEPLOYER",
                        resolverId: "MAVEN_RESOLVER"
                    )
                  
                    rtPublishBuildInfo (
                        serverId: env.ART_ID
                    )
                }
            }
        }

        stage ('Docker Build & Push') {
            when {
                expression {
                    params.DOCKER_BUILD
                }
            }
            steps {
                container('docker') {

                    rtServer (
                        id: env.ART_ID,
                        url: "https://${params.JPD_URL}/artifactory",
                        credentialsId: 'jenkins'
                    )

                    rtBuildInfo (
                        captureEnv: true,
                        excludeEnvPatterns: ['*private*', 'internal-*', 'ADM*'],
                        buildName: 'jenkins-mvn-docker',
                        buildNumber: env.BUILD_NUMBER
                    )
                    
                    rtDownload (
                        serverId: env.ART_ID,
                        spec: """{
                              "files": [
                                {
                                  \"pattern": \"${params.MVN_REPO}/**/multi-module-application-${params.NEW_VERSION}.jar\",
                                  \"target": \"multi-module-application.jar\",
                                  \"flat\": \"true\"
                                  
                                }
                              ]
                        }""",
                        failNoOp: true,
                        module: 'webapp',
                        buildName: 'jenkins-mvn-docker',
                        buildNumber: env.BUILD_NUMBER
                    )
                    
                    sh """
                        apk add curl openjdk11
                        curl -O https://raw.githubusercontent.com/jfrog/SwampUp2021/main/${params.TRAINING_PATH}/lab2/java/Dockerfile
                        docker login -u ${ARTY_CREDS_USR} -p ${ARTY_CREDS_PSW} ${params.JPD_URL}
                        ls -l 
                        docker build -t ${params.JPD_URL}/${params.DOCKER_REPO}/jenkins-javapp:${params.NEW_VERSION} .
                        docker images
                    """
                
                    rtDockerPush(
                        serverId: env.ART_ID,
                        image: "${params.JPD_URL}/${params.DOCKER_REPO}/jenkins-javapp:${params.NEW_VERSION}",
                        targetRepo: 'urs-docker-dev-local',
                        properties: 'project-name=uranus;status=stable',
                        // If the build name and build number are not set here, the current job name and number will be used:
                        buildName: 'jenkins-mvn-docker',
                        buildNumber: env.BUILD_NUMBER
                    )
 
                    rtPublishBuildInfo (
                        serverId: env.ART_ID,
                        buildName: 'jenkins-mvn-docker',
                        buildNumber: env.BUILD_NUMBER
                    )
                }
            } // end steps
        } // end stage

           
        stage('Call to JFrog Pipelines') {
            steps {
                sh """
                    curl -H "Accept: application/json" -H "Content-Type: application/json" -XPOST -H "authorization: ${params.WEBHOOK_PASS}"  ${params.WEBHOOK_URL}  --data-binary @- <<DATA
{
  "image_name": "${params.JPD_URL}/${params.DOCKER_REPO}/jenkins-javapp",
  "image_tag": "${params.NEW_VERSION}"
}
DATA
                 """
            } // end steps
        } // end stage 
        
    }
}
